import os
import io
from typing import List
import docx
import PyPDF2
import requests
import streamlit as st

from presentation import create_presentation, convert_to_pdf, generate_previews
from file_processor import parse_file_to_slides
from config import BACKGROUNDS, init_environment


def extract_text_from_file(uploaded_file) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (txt, pdf, docx).
        Returns:
            str: –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        filename = uploaded_file.name.lower()
        if filename.endswith('.txt'):
            return uploaded_file.getvalue().decode("utf-8")
        elif filename.endswith('.pdf'):
            pdf_reader = PyPDF2.PdfReader(io.BytesIO(uploaded_file.getvalue()))
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() or ""
            return text
        elif filename.endswith('.docx'):
            doc = docx.Document(io.BytesIO(uploaded_file.getvalue()))
            text = "\n".join([para.text for para in doc.paragraphs])
            return text
        else:
            return ""

init_environment()

st.title("üìä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π")

mode = st.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", ["–û–±—ã—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ñ–∞–π–ª—É"], horizontal=True)

col1, col2 = st.columns(2)
with col1:
    topic = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "–ú–æ—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è")
with col2:
    selected_bg = st.selectbox("–§–æ–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", list(BACKGROUNDS.keys()))
bg_path = BACKGROUNDS[selected_bg]

slides_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤", 1, 50, 3)

if mode == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ñ–∞–π–ª—É":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (txt, pdf, docx)", type=["txt", "pdf", "docx"])
    if uploaded_file:
        file_text = extract_text_from_file(uploaded_file)
        if file_text.strip():
            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            st.warning(f"–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")


if st.button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", type="primary"):
    slides_data = {
        "Presentation_title": topic,
        "Slide_count": slides_count,
    }

    if mode == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ñ–∞–π–ª—É":
        slides_data["Description"] = file_text.strip()
        response = requests.post(
            "http://localhost:5000/api_backend/gen_presentation_by_text",
            json=slides_data
        )
        slides_data['Slides'] = response.json().get('Slides', [])
        
    else:
        slides_data['Slides'] = [{
            "Slide_title": "",
            "Slide_content": ""
        } for _ in range(slides_count)]
        response = requests.post(
            "http://localhost:5000/api_backend/gen_presentation_by_title",
            json=slides_data
        )
        slides_data['Slides'] = response.json().get('Slides', [])
    
    with st.spinner("–ò–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏..."):
        pptx_path = create_presentation(topic, slides_data, bg_path)
        pdf_path = convert_to_pdf(pptx_path)
        previews = generate_previews(pptx_path, len(slides_data))

    st.success("–ì–æ—Ç–æ–≤–æ!")

    if previews:
        st.subheader("–ü—Ä–µ–≤—å—é —Å–ª–∞–π–¥–æ–≤")
        cols = st.columns(3)
        for i, img in enumerate(previews):
            cols[i % 3].image(img, caption=f"–°–ª–∞–π–¥ {i + 1}", use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        with open(pptx_path, "rb") as f:
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å PPTX",
                f.read(),
                file_name=os.path.basename(pptx_path),
                mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
            )
    with col2:
        if pdf_path and os.path.exists(pdf_path):
            with open(pdf_path, "rb") as f:
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å PDF",
                    f.read(),
                    file_name=os.path.basename(pdf_path),
                    mime="application/pdf"
                )